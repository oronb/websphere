import sys, os

#javaVersion = '1.7.1_64'
layer = sys.argv[0]
env = sys.argv[1]
initialHeapSize = sys.argv[2]
maximumHeapSize = sys.argv[3]
javaVersion = sys.argv[4]

objNameString = AdminControl.completeObjectName('WebSphere:type=Server,*') 
nodeName = AdminControl.getAttribute(objNameString, 'nodeName')
serverName = AdminControl.getAttribute(objNameString, 'name')
JavaVirtualMachine = AdminConfig.list('JavaVirtualMachine')
ApplicationServer = AdminConfig.list('ApplicationServer')

#Insert genericJvmArguments into the profile 
if layer == "pl": 
	generic = "-Dcom.ibm.websphere.webservices.DisableIBMJAXWSEngine=true -Dclient.encoding.override=UTF-8 -DalisPlExternalConfigPath=C:\\CONFIGURATION\PL_ENV%s" % (env)
	
if layer == "sl": 
	generic = "-Dcom.ibm.websphere.webservices.DisableIBMJAXWSEngine=true -DalisSlExternalConfigPath=C:\CONFIGURATION\SL_ENV%s  -DalisSlLog4jExternalConfigPath=file:C:\CONFIGURATION\SL_ENV%s" %(env,env) 

#Add genericJvmArguments values
AdminConfig.modify(JavaVirtualMachine,[['genericJvmArguments', generic]])

#Configure initalHeapSize and maximumHeapSize Java memory
AdminTask.setJVMProperties(['-nodeName', nodeName, '-serverName', serverName, '-initialHeapSize', initialHeapSize, '-maximumHeapSize', maximumHeapSize]) 

#Add Classloader Parent last
AdminConfig.create('Classloader',ApplicationServer,'[[mode PARENT_LAST]]')

#Add custom Property
AdminConfig.create('Property', JavaVirtualMachine, '[[name "websphere"] [value "false"]]') 
AdminConfig.create('Property', JavaVirtualMachine, '[[name "oracle.jdbc.V8Compatible"] [value "true"]]') 

#Set Java version
#AdminTask.setServerSDK(['-nodeName', nodeName, '-serverName', serverName ,'-sdkName', javaVersion]) 
AdminApp.uninstall('ivtApp') 
AdminConfig.save()
AdminApp.uninstall('query')
AdminConfig.save()
AdminApp.uninstall('DefaultApplication')
AdminConfig.save()
